#!/usr/bin/perl
#
# Copyright (C) 2007-2008 Egon Willighagen <egonw@users.sf.net>
# Licensed: GPL v3
#
use diagnostics;
use strict;
use XML::LibXML::XPathContext;

my $maxfoafdepth = 3;

if ($#ARGV != 0) {
  print "foafdigger [foaf.xrdf]\n";
  exit 0;
}

my $foaf = $ARGV[0];
my $wgetexec = "@WGET_EXECUTABLE@";
my $mdsumexec = "@MD5SUM_EXECUTABLE@";
my $strigicmd = "@STRIGICMD_EXECUTABLE@";

my $cachedir = "cache";

my %friends;

createFOAFCache($foaf, $cachedir, 0);
indexFOAFCache();

print "Done.\n";
exit 0;

sub createFOAFCache {
  my $foaf = $_[0];
  my $cachedir = $_[1];
  my $order = $_[2];

  my $cachedFOAFdir = downloadFOAF($foaf, $cachedir);
  # first order friends
  my @firstFriends = extractLinkedFOAFs($cachedFOAFdir);
  $order++;
  if ($order <= $maxfoafdepth) {
    print "Order $order friends in $cachedFOAFdir: " . scalar(@firstFriends) . "\n";
    foreach my $friend (@firstFriends) {
      my $friendResource = $friend->nodeValue;
      print "Checking friend $friendResource\n";
      if ($friendResource =~ m/^http/) {
        createFOAFCache($friendResource, $cachedFOAFdir, $order);
      }
    }
  } else {
    print "Not processing friends of order $order.\n";
  }
  `mkdir $cachedFOAFdir/interests`;
  my @interests = extractLinkedInterests($cachedFOAFdir);
  foreach my $interest (@interests) {
    print "Checking interest " . $interest->nodeValue . "\n";
    downloadResource($interest->nodeValue, $cachedFOAFdir, "interests");
  }
  `mkdir $cachedFOAFdir/projects`;
  my @projects = extractLinkedProjects($cachedFOAFdir);
  foreach my $project (@projects) {
    print "Checking project " . $project->textContent . "\n";
    downloadResource($project->textContent, $cachedFOAFdir, "projects");
  }
  `mkdir $cachedFOAFdir/other`;
  my @others = extractLinkedOtherResources($cachedFOAFdir);
  foreach my $other (@others) {
    print "Checking other resource " . $other->nodeValue . "\n";
    downloadResource($other->nodeValue, $cachedFOAFdir, "other");
  }
  `mkdir $cachedFOAFdir/other`;
  my @otherFields = extractLinkedOtherFieldResources($cachedFOAFdir);
  foreach my $otherField (@otherFields) {
    print "Checking other resource " . $otherField->textContent . "\n";
    downloadResource($otherField->textContent, $cachedFOAFdir, "other");
  }
}

sub indexFOAFCache {
  my $indexdir = "index";
  if (!(-e "$indexdir")) {
    # OK, first call of strigi cmd
    print "Creating a new index...\n";
    `$strigicmd create -t clucene -d $indexdir $cachedir`;
  } else {
    # OK, there already exists an index, just need to update
    print "Updating the existing index...\n";
    `$strigicmd update -t clucene -d $indexdir $cachedir`;
  }
}

sub downloadFOAF {
  my $foaf = $_[0];
  my $cachedir = $_[1];

  print "Downloading $foaf ...\n";

  my $mdsum = `echo "$foaf" | $mdsumexec - | cut -d' ' -f1`;
  $mdsum =~ s/[\n|\r|\s]//g;

  if ($friends{$mdsum}) {
    print "Already downloaded this friend: $foaf\n";
    $cachedir = $friends{$mdsum};
  } else {
    $cachedir = "$cachedir/$mdsum";
    `mkdir -p $cachedir`;
    my $cachedFOAF = "$cachedir/me.xrdf";
    `echo "$foaf" > $cachedir/url`;
    `$wgetexec -q -O $cachedFOAF $foaf`;
    $friends{$mdsum} = $cachedir;
  }

  $cachedir;
}

sub downloadResource {
  my $resource = $_[0];
  my $cachedir = $_[1];
  my $subdir = $_[2];

  print "Downloading $resource ...\n";

  my $mdsum = `echo "$resource" | $mdsumexec - | cut -d' ' -f1`;
  $mdsum =~ s/[\n|\r|\s]//g;

  my $cachedFOAF = "$cachedir/$subdir/$mdsum";
  `$wgetexec -q -O $cachedFOAF $resource`;
  `echo $resource > $cachedFOAF.url`;
}

sub extractLinkedFOAFs {

  my $cachedFOAF = $_[0] . "/me.xrdf";

  print "Extracting Friends from $cachedFOAF ...\n";
  my $foafNodes = XML::LibXML->new->parse_file($cachedFOAF);
  my $xc = XML::LibXML::XPathContext->new($foafNodes);

  $xc->registerNs('rdf', 'http://www.w3.org/1999/02/22-rdf-syntax-ns#');
  $xc->registerNs('rdfs', 'http://www.w3.org/2000/01/rdf-schema#');
  $xc->registerNs('foaf', 'http://xmlns.com/foaf/0.1/');
  $xc->registerNs('dc', 'http://purl.org/dc/elements/1.1/');

#     <foaf:knows>
#       <foaf:Person rdf:ID="ArjohnKampman">
#         <foaf:name>Arjohn Kampman</foaf:name>
#         <rdfs:seeAlso rdf:resource="http://www.openrdf.org/people/foaf-arjohn.rdf" />
#       </foaf:Person>
#     </foaf:knows>

  my @rdfResources = $xc->findnodes('//foaf:Person/rdfs:seeAlso/@rdf:resource');
  print "Found #friends: " . scalar @rdfResources . "\n";

  foreach my $resource (@rdfResources) {
    print "Resource found: " . $resource->nodeValue . "\n";
  }

  @rdfResources;
}

sub extractLinkedInterests {

  my $cachedFOAF = $_[0] . "/me.xrdf";

  print "Extracting Interests from $cachedFOAF ...\n";
  my $foafNodes = XML::LibXML->new->parse_file($cachedFOAF);
  my $xc = XML::LibXML::XPathContext->new($foafNodes);

  $xc->registerNs('rdf', 'http://www.w3.org/1999/02/22-rdf-syntax-ns#');
  $xc->registerNs('rdfs', 'http://www.w3.org/2000/01/rdf-schema#');
  $xc->registerNs('foaf', 'http://xmlns.com/foaf/0.1/');
  $xc->registerNs('dc', 'http://purl.org/dc/elements/1.1/');

#     <foaf:interest rdf:resource="http://bla"/>

  my @rdfResources = $xc->findnodes('//foaf:interest/@rdf:resource');
  print "Found #interests: " . scalar @rdfResources . "\n";

  @rdfResources;
}

sub extractLinkedProjects {

  my $cachedFOAF = $_[0] . "/me.xrdf";

  print "Extracting Projects from $cachedFOAF ...\n";
  my $foafNodes = XML::LibXML->new->parse_file($cachedFOAF);
  my $xc = XML::LibXML::XPathContext->new($foafNodes);

  $xc->registerNs('rdf', 'http://www.w3.org/1999/02/22-rdf-syntax-ns#');
  $xc->registerNs('rdfs', 'http://www.w3.org/2000/01/rdf-schema#');
  $xc->registerNs('foaf', 'http://xmlns.com/foaf/0.1/');
  $xc->registerNs('dc', 'http://purl.org/dc/elements/1.1/');

#     <foaf:interest rdf:resource="http://bla"/>

  my @collection = ();
  my @rdfResources = $xc->findnodes('//foaf:currentProject/@rdf:resource');
  push(@collection, @rdfResources);
  my @moreResources = $xc->findnodes('//foaf:currentProject/foaf:Project/foaf:homepage');
  push(@collection, @moreResources);
  @moreResources = $xc->findnodes('//foaf:currentProject/foaf:Project/foaf:homepage/@rdf:resource');
  push(@collection, @moreResources);

  print "Found #projects: " . scalar @collection . "\n";

  @collection;
}

sub extractLinkedOtherResources {

  my $cachedFOAF = $_[0] . "/me.xrdf";

  print "Extracting other resources from $cachedFOAF ...\n";
  my $foafNodes = XML::LibXML->new->parse_file($cachedFOAF);
  my $xc = XML::LibXML::XPathContext->new($foafNodes);

  $xc->registerNs('rdf', 'http://www.w3.org/1999/02/22-rdf-syntax-ns#');
  $xc->registerNs('rdfs', 'http://www.w3.org/2000/01/rdf-schema#');
  $xc->registerNs('foaf', 'http://xmlns.com/foaf/0.1/');
  $xc->registerNs('dc', 'http://purl.org/dc/elements/1.1/');

#     <foaf:interest rdf:resource="http://bla"/>

  my @collection = ();
  my $foafRecord = extractFOAFRecord($xc);
  if ($foafRecord) {
    print "record: " . $foafRecord . "\n";
    my @rdfResources = $foafRecord->findnodes('./foaf:weblog/@rdf:resource');
    push(@collection, @rdfResources);
    @rdfResources = $foafRecord->findnodes('./foaf:publications/@rdf:resource');
    push(@collection, @rdfResources);

    print "Found #other resources: " . scalar @collection . "\n";
  } else {
    print "Could not find the root FOAF node...\n";
  }

  @collection;
}

sub extractLinkedOtherFieldResources {

  my $cachedFOAF = $_[0] . "/me.xrdf";

  print "Extracting other resources from $cachedFOAF ...\n";
  my $foafNodes = XML::LibXML->new->parse_file($cachedFOAF);
  my $xc = XML::LibXML::XPathContext->new($foafNodes);

  $xc->registerNs('rdf', 'http://www.w3.org/1999/02/22-rdf-syntax-ns#');
  $xc->registerNs('rdfs', 'http://www.w3.org/2000/01/rdf-schema#');
  $xc->registerNs('foaf', 'http://xmlns.com/foaf/0.1/');
  $xc->registerNs('dc', 'http://purl.org/dc/elements/1.1/');

#     <foaf:interest rdf:resource="http://bla"/>

  my @collection = ();
  my $foafRecord = extractFOAFRecord($xc);
  if ($foafRecord) {
    print "record: " . $foafRecord . "\n";
    my @rdfResources = $foafRecord->findnodes('./foaf:homepage');
    push(@collection, @rdfResources);

    print "Found #other resources: " . scalar @collection . "\n";
  } else {
    print "Could not find the root FOAF node...\n";
  }

  @collection;
}

sub extractFOAFRecord {

  my $xc= $_[0];

  my $notFoundName = 1;
  my @foundRecord;
  my @rdfResources = $xc->findnodes('//foaf:primaryTopic/@rdf:resource');
  foreach my $resource (@rdfResources) {
    my $resourceURI = $resource->nodeValue;
    if ($notFoundName) {
      my @personResources = $xc->findnodes('//foaf:Person/@rdf:about');
      foreach my $personResource (@personResources) {
        my $personURI = $personResource->nodeValue;
        if (!($personURI =~ m/\#/)) {
          $personURI = "\#" . $personURI;
        }
        if ($personURI eq $resourceURI) {
          $notFoundName = 0;
          @foundRecord = $personResource->findnodes('..');
        }
      }
    }
    if ($notFoundName) {
      my @personResources = $xc->findnodes('//foaf:Person/@rdf:ID');
      foreach my $personResource (@personResources) {
        my $personURI = $personResource->nodeValue;
        if (!($personURI =~ m/\#/)) {
          $personURI = "\#" . $personURI;
        }
        if ($personURI eq $resourceURI) {
          $notFoundName = 0;
          @foundRecord = $personResource->findnodes('..');
        }
      }
    }
  }

  $foundRecord[0];
}
