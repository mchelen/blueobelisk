#!/usr/bin/perl
#
# Copyright (C) 2007-2008 Egon Willighagen <egonw@users.sf.net>
# Licensed: GPL v3
#
use diagnostics;
use strict;
use XML::LibXML::XPathContext;

my $maxfoafdepth = 3;

if ($#ARGV != 0) {
  print "foafdigger [foaf.xrdf]\n";
  exit 0;
}

my $foaf = $ARGV[0];
my $wgetexec = "@WGET_EXECUTABLE@";
my $mdsumexec = "@MD5SUM_EXECUTABLE@";
my $strigicmd = "@STRIGICMD_EXECUTABLE@";

my $cachedir = "cache";

my %friends;

createFOAFCache($foaf, $cachedir, 0);
#indexFOAFCache();

print "Done.\n";
exit 0;

sub createFOAFCache {
  my $foaf = $_[0];
  my $cachedir = $_[1];
  my $order = $_[2];

  if ($order > $maxfoafdepth) {
    print "Not processing friends of order $order.\n";
    return;
  }

  my $cachedFOAFdir = downloadFOAF($foaf, $cachedir);
  # first order friends
  my @firstFriends = extractLinkedFOAFs($cachedFOAFdir);
  $order++;
  print "Order $order friends in $cachedFOAFdir: " . scalar(@firstFriends) . "\n";
  foreach my $friend (@firstFriends) {
    my $friendResource = $friend->nodeValue;
    print "Checking friend $friendResource\n";
    if ($friendResource =~ m/^http/) {
      createFOAFCache($friendResource, $cachedFOAFdir, $order);
    }
  }

}

sub indexFOAFCache {
  my $indexdir = "index";
  if (!(-e "$indexdir")) {
    # OK, first call of strigi cmd
    print "Creating a new index...\n";
    `$strigicmd create -t clucene -d $indexdir $cachedir`;
  } else {
    # OK, there already exists an index, just need to update
    print "Updating the existing index...\n";
    `$strigicmd update -t clucene -d $indexdir $cachedir`;
  }
}

sub downloadFOAF {
  my $foaf = $_[0];
  my $cachedir = $_[1];

  print "Downloading $foaf ...\n";

  my $mdsum = `echo "$foaf" | $mdsumexec - | cut -d' ' -f1`;
  $mdsum =~ s/[\n|\r|\s]//g;

  if ($friends{$mdsum}) {
    print "Already downloaded this friend: $foaf\n";
    $cachedir = $friends{$mdsum};
  } else {
    $cachedir = "$cachedir/$mdsum";
    `mkdir -p $cachedir`;
    my $cachedFOAF = "$cachedir/me.xrdf";
    `echo "$foaf" > $cachedir/url`;
    `$wgetexec -q -O $cachedFOAF $foaf`;
    $friends{$mdsum} = $cachedir;
  }

  $cachedir;
}

sub extractLinkedFOAFs {

  my $cachedFOAF = $_[0] . "/me.xrdf";

  print "Extracting Friends from $cachedFOAF ...\n";
  my $foafNodes = XML::LibXML->new->parse_file($cachedFOAF);
  my $xc = XML::LibXML::XPathContext->new($foafNodes);

  $xc->registerNs('rdf', 'http://www.w3.org/1999/02/22-rdf-syntax-ns#');
  $xc->registerNs('rdfs', 'http://www.w3.org/2000/01/rdf-schema#');
  $xc->registerNs('foaf', 'http://xmlns.com/foaf/0.1/');
  $xc->registerNs('dc', 'http://purl.org/dc/elements/1.1/');

#     <foaf:knows>
#       <foaf:Person rdf:ID="ArjohnKampman">
#         <foaf:name>Arjohn Kampman</foaf:name>
#         <rdfs:seeAlso rdf:resource="http://www.openrdf.org/people/foaf-arjohn.rdf" />
#       </foaf:Person>
#     </foaf:knows>

  my @rdfResources = $xc->findnodes('//foaf:Person/rdfs:seeAlso/@rdf:resource');
  print "Found #friends: " . scalar @rdfResources . "\n";

  foreach my $resource (@rdfResources) {
    print "Resource found: " . $resource->nodeValue . "\n";
  }

  @rdfResources;
}
